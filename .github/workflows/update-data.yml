name: Actualizaci√≥n y Publicaci√≥n de App Shiny

on:
  schedule:
    - cron: "0 6 * * *"  # Cada d√≠a a las 6:00 AM UTC
  workflow_dispatch:  # Permite ejecutar manualmente

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necesario para git operations
    
    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: "4.4.2"  # Actualizado para compatibilidad con paquetes
        use-public-rspm: true
    
    - name: Instalar librer√≠as del sistema
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libcurl4-openssl-dev \
          libssl-dev \
          libxml2-dev \
          libpoppler-cpp-dev \
          libpng-dev \
          libjpeg-dev \
          libtiff5-dev \
          libgdal-dev \
          libproj-dev \
          libgeos-dev \
          libfontconfig1-dev \
          libfreetype6-dev \
          libudunits2-dev \
          libharfbuzz-dev \
          libfribidi-dev
    
    - name: Cache paquetes R
      uses: actions/cache@v3
      with:
        path: ~/.local/share/renv
        key: r-packages-${{ runner.os }}-${{ hashFiles('**/renv.lock', '**/DESCRIPTION') }}
        restore-keys: |
          r-packages-${{ runner.os }}-
    
    - name: Verificar archivos necesarios
      run: |
        if [ ! -f "app.R" ] && [ ! -f "R/ui.R" ] && [ ! -f "ui.R" ]; then
          echo "‚ùå Error: No se encontraron archivos de Shiny app (app.R, R/ui.R o ui.R)"
          exit 1
        fi
        echo "‚úÖ Archivos de Shiny app encontrados"
        
        # Verificar estructura de directorios
        if [ ! -d "data" ]; then
          echo "üìÅ Creando directorio data/"
          mkdir -p data
        fi
    
    - name: Instalar paquetes R necesarios
      run: |
        # Verificar si existe renv.lock
        if [ -f "renv.lock" ]; then
          echo "üì¶ Detectado renv.lock - configurando renv para GitHub Actions..."
          
          # Renombrar .Rprofile temporalmente para evitar conflictos
          if [ -f ".Rprofile" ]; then
            mv .Rprofile .Rprofile.backup
          fi
          
          # Instalar renv y restaurar sin activar autom√°ticamente
          Rscript -e "
            if (!requireNamespace('renv', quietly = TRUE)) install.packages('renv')
            cat('üì¶ Restaurando paquetes desde renv.lock...\n')
            renv::restore(prompt = FALSE)
            cat('‚úÖ Paquetes restaurados correctamente\n')
          "
          
          # Restaurar .Rprofile
          if [ -f ".Rprofile.backup" ]; then
            mv .Rprofile.backup .Rprofile
          fi
        else
          echo "üì¶ Instalando paquetes manualmente..."
          Rscript -e "
            packages <- c('rsconnect', 'Tivy', 'dplyr', 'leaflet', 'pdftools', 'png', 'raster')
            new_packages <- packages[!(packages %in% installed.packages()[,'Package'])]
            if(length(new_packages)) {
              install.packages(new_packages, dependencies = TRUE)
              cat('‚úÖ Paquetes instalados:', paste(new_packages, collapse = ', '), '\n')
            } else {
              cat('‚úÖ Todos los paquetes ya est√°n instalados\n')
            }
          "
        fi
    
    - name: Ejecutar script de actualizaci√≥n (opcional)
      run: |
        if [ -f "actualizacion_diaria.R" ]; then
          echo "‚ñ∂Ô∏è Ejecutando script de actualizaci√≥n..."
          Rscript actualizacion_diaria.R || {
            echo "‚ö†Ô∏è El script de actualizaci√≥n fall√≥, pero continuamos con el despliegue"
            exit 0
          }
          echo "‚úÖ Script ejecutado correctamente"
        else
          echo "‚ÑπÔ∏è No se encontr√≥ actualizacion_diaria.R. Continuando sin actualizaci√≥n..."
        fi
    
    - name: Verificar funcionamiento de la app
      run: |
        echo "üîç Verificando que la app se puede cargar..."
        
        # Ejecutar sin activar renv autom√°ticamente
        Rscript --vanilla -e "
          tryCatch({
            if (file.exists('app.R')) {
              source('app.R', local = TRUE)
              cat('‚úÖ app.R se carga correctamente\n')
            } else if (file.exists('ui.R') && file.exists('server.R')) {
              source('ui.R', local = TRUE)
              source('server.R', local = TRUE)
              cat('‚úÖ ui.R y server.R se cargan correctamente\n')
            }
          }, error = function(e) {
            cat('‚ùå Error al cargar la app:', conditionMessage(e), '\n')
            quit(status = 1)
          })
        "
    
    - name: Commit y push de cambios si los hay
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # A√±adir todos los cambios
        git add -A
        
        # Verificar si hay cambios
        if git diff --cached --quiet; then
          echo "üìç No hay cambios para commitear"
        else
          echo "üìù Commiteando cambios..."
          git commit -m "üìä Actualizaci√≥n autom√°tica - $(date '+%Y-%m-%d %H:%M:%S UTC')" || {
            echo "‚ö†Ô∏è Error al hacer commit, pero continuamos"
            exit 0
          }
          
          # Intentar push con reintentos
          for i in {1..3}; do
            if git push origin HEAD; then
              echo "‚úÖ Push realizado correctamente"
              break
            else
              echo "‚ö†Ô∏è Intento $i de push fall√≥, reintentando..."
              sleep 5
              git pull --rebase origin HEAD || true
            fi
          done
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Preparar para despliegue
      run: |
        echo "üöÄ Preparando archivos para despliegue..."
        
        # Restaurar .Rprofile original para el despliegue si existe
        if [ -f ".Rprofile.original" ]; then
          mv .Rprofile.original .Rprofile
          echo "üìÑ Restaurado .Rprofile original para despliegue"
        fi
        
        # Verificar que rsconnect est√© disponible
        Rscript -e "
          if (!requireNamespace('rsconnect', quietly = TRUE)) {
            install.packages('rsconnect')
          }
          cat('‚úÖ rsconnect disponible\n')
        "
    
    - name: Publicar en shinyapps.io
      env:
        SHINYAPPS_ACCOUNT: ${{ secrets.SHINYAPPS_ACCOUNT }}
        SHINYAPPS_TOKEN: ${{ secrets.SHINYAPPS_TOKEN }}
        SHINYAPPS_SECRET: ${{ secrets.SHINYAPPS_SECRET }}
      run: |
        echo "üöÄ Iniciando despliegue en shinyapps.io..."
        
        Rscript -e "
          # Verificar que las credenciales est√©n disponibles
          account <- Sys.getenv('SHINYAPPS_ACCOUNT')
          token <- Sys.getenv('SHINYAPPS_TOKEN')
          secret <- Sys.getenv('SHINYAPPS_SECRET')
          
          if (account == '' || token == '' || secret == '') {
            stop('‚ùå Error: Credenciales de shinyapps.io no configuradas correctamente')
          }
          
          cat('üì° Configurando credenciales...\n')
          rsconnect::setAccountInfo(
            name = account,
            token = token,
            secret = secret
          )
          
          cat('üöÄ Desplegando aplicaci√≥n...\n')
          rsconnect::deployApp(
            appDir = '.',
            appName = NULL,  # Usa el nombre del directorio
            forceUpdate = TRUE,
            launch.browser = FALSE,
            logLevel = 'verbose'
          )
          
          cat('‚úÖ Despliegue completado exitosamente!\n')
        " || {
          echo "‚ùå Error durante el despliegue"
          exit 1
        }
    
    - name: Resumen del workflow
      if: always()
      run: |
        echo "üìã RESUMEN DEL WORKFLOW"
        echo "======================="
        echo "üïê Fecha: $(date)"
        echo "üìä Repositorio: ${{ github.repository }}"
        echo "üîÑ Commit: ${{ github.sha }}"
        echo "üë§ Ejecutado por: ${{ github.actor }}"
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ Estado: EXITOSO"
          echo "üåê Tu app est√° disponible en: https://${{ secrets.SHINYAPPS_ACCOUNT }}.shinyapps.io/[nombre-app]"
        else
          echo "‚ùå Estado: FALL√ì"
          echo "üìù Revisa los logs para m√°s detalles"
        fi